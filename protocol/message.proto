syntax = "proto3";

package biotracker;

import "tracking.proto";
import "video.proto";

enum ServiceType {
    BIOTRACKER_CORE = 0;
    FEATURE_DETECTOR = 1;
    MATCHER = 2;
    OBSERVER = 4;
}

message Empty {}
message Point {
  float x = 1;
  float y = 2;
}

// Describes the rectification and tracking area The areas are described as
// polygons. Point coordinates are in normalized pixel coordinates,
// in range [0.0, 1.0].
message Arena {
    uint32 width_cm = 3;
    uint32 height_cm = 4;
    // Four corners of rectification area
    repeated Point rectification_corners = 5;
    // N corners of tracking area
    repeated Point tracking_area_corners = 6;
}

message EntityIDSwitch {
  uint32 id1 = 1;
  uint32 id2 = 2;
}

message BioTrackerCommand {
    oneof command {
        PlaybackState playback_state = 1;
        RecordingState recording_state = 2;
        bool realtime_mode = 9;
        float target_fps = 12;
        uint32 seek = 3;
        string open_video = 4;
        string open_track = 11;
        string save_track = 17;
        RecordingConfig initialize_recording = 7;
        Empty add_entity = 5;
        uint32 remove_entity = 6;
        EntityIDSwitch switch_entities = 10;
        Arena update_arena = 13;
        ComponentConfig update_component = 15;
        UndistortMode undistort_mode = 16;
        Empty save_config = 14;
        Empty shutdown = 8;
    }
}

message Experiment {
    // Target frames per second
    float target_fps = 3;
    // Metadata for the current video source
    VideoInfo video_info = 4;
    // Metadata for the recording
    RecordingConfig recording_config = 5;
    // Configuration for the tracking arena
    Arena arena = 6;
    // Current Playback state
    PlaybackState playback_state = 7;
    // Current Recording state
    RecordingState recording_state = 8;
    // Currently replaying Tracking file, empty if not loaded
    string track_file = 10;
    // Current Tracking mode
    bool realtime_mode = 12;
    // Undistortion configuration
    UndistortMode undistort_mode = 17;
    // Latest tracking image
    optional Image last_image = 9;
    // Latest tracked features
    optional Features last_features = 11;
    // List of expected entity ID's
    repeated uint32 entity_ids = 13;
    // SkeletonDescriptor used in tracked features
    optional SkeletonDescriptor skeleton = 18;
    // List of BioTracker components
    repeated ComponentConfig components = 16;
}

message RecordingConfig {
  string base_path = 1;
  double fps = 2;
  uint32 width = 3;
  uint32 height = 4;
  string image_stream_id = 5;
}

service BioTracker {
    rpc get_state(Empty) returns (Experiment) {}
    rpc command(BioTrackerCommand) returns (Empty) {}
    rpc add_image(Image) returns (Empty) {}
    rpc heartbeat(Empty) returns (Empty) {}
}

message DetectorResponse {
    Features features = 1;
    SkeletonDescriptor skeleton = 2;
}

service FeatureDetector {
    rpc set_config(ComponentConfig) returns (Empty) {}
    rpc detect_features(Image) returns (DetectorResponse) {}
}

message MatcherRequest {
    repeated uint32 entity_ids = 1;
    Features features = 3;
}

service Matcher {
    rpc set_config(ComponentConfig) returns (Empty) {}
    rpc match_features(MatcherRequest) returns (Features);
    rpc switch_ids(EntityIDSwitch) returns (Empty) {}
}

service Observer {
    rpc set_config(ComponentConfig) returns (Empty) {}
    rpc update(Experiment) returns (Empty);
}

message PythonConfig {
    string venv = 1;
    string cmd = 2;
}

message ComponentConfig {
    string id = 2;
    string config_json = 1;
    repeated string services = 3;
    optional PythonConfig python_config = 5;
}

message BiotrackerConfig {
    repeated ComponentConfig components = 1;
    repeated CameraConfig cameras = 3;
    Arena arena = 2;
}

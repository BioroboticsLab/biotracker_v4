syntax = "proto3";

package biotracker;

import "tracking.proto";
import "video.proto";


enum ServiceType {
    BIOTRACKER_CORE = 0;
    FEATURE_DETECTOR = 1;
    MATCHER = 2;
    TRACK_RECORDER = 3;
}

message Empty {}
message Point {
    float x = 1;
    float y = 2;
}

message Arena {
    uint32 width_cm = 3;
    uint32 height_cm = 4;
    // corners of rectification area in pixel space, in clockwise order
    repeated Point rectification_corners = 5;
    // corners of tracking area area in pixel space, in clockwise order
    repeated Point tracking_area_corners = 6;
}

message EntityIDSwitch {
  uint32 id1 = 1;
  uint32 id2 = 2;
}

message Transform {}

message BioTrackerCommand {
    oneof command {
        PlaybackState playback_state = 1;
        RecordingState recording_state = 2;
        bool realtime_mode = 9;
        float target_fps = 12;
        uint32 seek = 3;
        string open_video = 4;
        string open_track = 11;
        RecordingConfig initialize_recording = 7;
        Empty add_entity = 5;
        uint32 remove_entity = 6;
        EntityIDSwitch switch_entities = 10;
        Arena update_arena = 13;
        ComponentConfig update_component = 15;
        Empty save_config = 14;
        Empty shutdown = 8;
    }
}

message TrackingMetrics {
    uint32 tracking_dropped_frames = 1;
    uint32 encoder_dropped_frames = 2;
    uint32 playback_dropped_frames = 9;
    uint32 detected_features = 8;
    float playback_frame_time = 3;
    float tracking_frame_time = 4;
}

message Experiment {
    float target_fps = 3;
    VideoInfo video_info = 4;
    RecordingConfig recording_config = 5;
    Arena arena = 6;
    PlaybackState playback_state = 7;
    RecordingState recording_state = 8;
    bool realtime_mode = 12;
    optional TrackingMetrics tracking_metrics = 14;
    optional Image last_image = 9;
    optional Features last_features = 11;
    optional Entities last_entities = 10;
    repeated uint32 entity_ids = 13;
    optional Transform rectification = 15;
    repeated ComponentConfig components = 16;
}

message RecordingConfig {
  string base_path = 1;
  double fps = 2;
  uint32 width = 3;
  uint32 height = 4;
  string image_stream_id = 5;
}

service BioTracker {
    rpc get_state(Empty) returns (Experiment) {}
    rpc command(BioTrackerCommand) returns (Empty) {}
    rpc add_image(Image) returns (Empty) {}
}

message DetectorRequest {
    Image image = 1;
    Arena arena = 2;
}

service FeatureDetector {
    rpc set_config(ComponentConfig) returns (Empty) {}
    rpc detect_features(DetectorRequest) returns (Features);
}

message MatcherRequest {
    Features features = 1;
    uint32 frame_number = 4;
    Entities last_entities = 2;
}

service Matcher {
    rpc set_config(ComponentConfig) returns (Empty) {}
    rpc match_features(MatcherRequest) returns (Entities);
}

message TrackSaveRequest {
    Experiment experiment = 1;
    Track track = 12;
}

service TrackRecorder {
    rpc set_config(ComponentConfig) returns (Empty) {}
    rpc save(TrackSaveRequest) returns (Empty);
}

message PythonConfig {
    string venv = 1;
    string cmd = 2;
}

message ComponentConfig {
    string id = 2;
    string config_json = 1;
    string address = 4;
    repeated string services = 3;
    optional PythonConfig python_config = 5;
}

message BiotrackerConfig {
    repeated ComponentConfig components = 1;
    Arena arena = 2;
}
